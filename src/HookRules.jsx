//npm install eslint-plugin-react-hooks --save-dev
// Sua Configura√ß√£o ESLint

import { useEffect } from "react";

/*{
  "plugins": [
    // ...
    "react-hooks"
  ],
  "rules": {                                //ESLint Plugin install to use hooks
    // ...
    "react-hooks/rules-of-hooks": "error", // Verifica as regras dos Hooks
    "react-hooks/exhaustive-deps": "warn" // Verifica as depend√™ncias de effects
  }
}  

Voc√™ pode pular para pr√≥xima p√°gina agora, onde explicamos melhor como escrever seus
 pr√≥prios Hooks. Nessa p√°gina continuaremos explicando o motivo por tr√°s dessas regras.

Explica√ß√£o
Assim como aprendemos anteriormente, n√≥s podemos usar diversos Hooks
 (States ou Effects) em um √∫nico componente:*/

 function Form() {
    // 1. Use a vari√°vel de estado (state) name
    const [name, setname] = useState('Mary');

    // 2.Use um efeito para persistir o formul√°rio
    useEffect(function persistForm() {
        localStorage.setItem('formData', name);
    });

    // 3. Use a vari√°vel de estado (state) surname
    const [surname, setSurname] = useState('Poppins');

    //4. Use um efeito para atualizar o t√≠tulo
    useEffect(function updateTitle() {
        document.title = name + ' ' + surname;
    });
    //....
 }

 /*Agora, como o React sabe qual o estado (state) correspondente ao useState
  chamado? A resposta √© que o React depende da ordem em que os Hooks s√£o chamados.
   Nosso exemplo funciona porque a ordem de chamada dos Hooks √© a mesma sempre que o
    componente √© renderizado: */

    // ------------
// Primeira renderiza√ß√£o
// ------------
useState('Mary')           // 1. Inicializa a vari√°vel de estado (state) name com 'Mary'
useEffect(persistForm)     // 2. Adiciona um efeito para persistir o formul√°rio
useState('Poppins')        // 3. Inicializa a vari√°vel de estado (state) surname com 'Poppins'
useEffect(updateTitle)     // 4. Adiciona um efeito para atualizar o t√≠tulo

// -------------
// Segunda renderiza√ß√£o
// -------------
useState('Mary')           // 1. L√™ a vari√°vel de estado (state) name (argumento ignorado)
useEffect(persistForm)     // 2. Substitui o efeito para persistir no formul√°rio
useState('Poppins')        // 3. L√™ a vari√°vel de estado (state) surname (argumento ignorado)
useEffect(updateTitle)     // 4. Substitui o efeito que atualiza o t√≠tulo

// ...

/*Enquanto a ordem dos Hooks chamados for a mesma entre as renderiza√ß√µes, o React
 pode associar um estado (state) local a cada um deles. Mas o que acontece se
  colocarmos uma chamada de Hook (por exemplo, o efeito persistForm) dentro de uma
   condi√ß√£o? */

   // üî¥ N√≥s estaremos quebrando a primeira regra por usar um Hook dentro de uma condi√ß√£o
if (name !== '') {
    useEffect(function persistForm() {
      localStorage.setItem('formData', name);
    });
  }

  /*A condi√ß√£o name !== '' √© true na primeira renderiza√ß√£o, ent√£o chamamos o Hook
   dentro da condi√ß√£o. Entretanto, na pr√≥xima renderiza√ß√£o o usu√°rio pode limpar o
    formul√°rio, fazendo com que a condi√ß√£o seja false. Agora que pulamos este Hook
     durante a renderiza√ß√£o, a ordem das chamadas dos Hooks foi alterada: */

     useState('Mary')           // ‚úÖ  1. L√™ a vari√°vel de estado (state) name (argumento √© ignorado)
// useEffect(persistForm)  // üî¥  Agora, este Hook foi ignorado!
useState('Poppins')        // üî¥  Na ordem era pra ser 2 (mas foi 3). Falha ao ler a vari√°vel de estado (state) surname
useEffect(updateTitle)     // üî¥  Na ordem era pra ser 3 (mas foi 4). Falha ao substituir o efeito

/*O React n√£o saberia o que retornar na segunda chamada do Hook useState. O React
 esperava que a segunda chamada de Hook nesse componente fosse ao efeito persistForm,
  assim como aconteceu na renderiza√ß√£o anterior, mas a ordem foi alterada. A partir
   da√≠, toda vez que um Hook for chamado depois daquele que n√≥s pulamos, o pr√≥ximo
    tamb√©m se deslocaria, levando a erros.

√â por isso que os Hooks devem ser chamados no n√≠vel superior de nosso componente. Se
 n√≥s queremos executar um efeito condicional, n√≥s podemos colocar a condi√ß√£o dentro
  de nosso Hook: */

  useEffect(function persistForm() { //the hook cannot be inside the condition (if).
    // üëç  Legal! Agora n√£o quebramos mais a primeira regra.
    if (name !== '') {
      localStorage.setItem('formData', name); 
    }
  });

  /*Note que voc√™ n√£o precisa se preocupar com esse problema, se voc√™ usar a regra
   fornecida no plugin do ESLint. Mas agora voc√™ tamb√©m sabe o porqu√™ dos Hooks
    funcionarem dessa maneira, e quais os problemas que essas regras previnem. */